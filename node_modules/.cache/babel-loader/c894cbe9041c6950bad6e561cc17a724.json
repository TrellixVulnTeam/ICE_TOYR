{"ast":null,"code":"var _jsxFileName = \"/Users/jman/Developer/ice/src/components/Map/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport mapStoreToProps from '../../redux/mapStoreToProps';\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Map(props) {\n  _s();\n\n  const dispatch = useDispatch(); // let lat = props.store.geocode.results[0].geometry.location.lat;\n  // let lng = props.store.geocode.results[0].geometry.location.lng;\n\n  const [lat, setLat] = useState('');\n  const [lng, setLng] = useState('');\n  let url = `https://www.google.com/maps/embed/v1/view?key=${props.store.key}&center=${lat},${lng}&zoom=20&maptype=satellite`;\n  const address = {\n    houseNumber: 2808,\n    street: 'Terrace',\n    streetType: 'Dr',\n    city: 'Burnsville',\n    State: 'MN'\n  };\n  useEffect(() => {\n    dispatch({\n      type: 'GET_KEY'\n    });\n    dispatch({\n      type: 'GET_GEOCODE',\n      payload: address\n    });\n    setLat(props.store.geocode.results[0].geometry.location.lat);\n    setLng(props.store.geocode.results[0].geometry.location.lng);\n  }, [dispatch]);\n\n  const getGeocode = () => {\n    console.log('getting my lang and long', props.store.geocode.results[0].geometry.location.lat);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row w-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"iframe\", {\n      title: \"unique title\",\n      width: \"100%\",\n      height: \"600\",\n      frameBorder: \"0\",\n      src: url,\n      allowFullScreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getGeocode,\n      children: \"geocode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Map, \"q6Pd8zrEG2NobxlZnZuN3HF0Hag=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Map;\nexport default connect(mapStoreToProps)(Map);\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/jman/Developer/ice/src/components/Map/Map.js"],"names":["React","useEffect","useState","connect","useDispatch","mapStoreToProps","Map","props","dispatch","lat","setLat","lng","setLng","url","store","key","address","houseNumber","street","streetType","city","State","type","payload","geocode","results","geometry","location","getGeocode","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAO,WAAP;;;AAGA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAElB,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B,CAFkB,CAIlB;AACA;;AAEA,QAAM,CAACK,GAAD,EAAMC,MAAN,IAAgBR,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACS,GAAD,EAAMC,MAAN,IAAgBV,QAAQ,CAAC,EAAD,CAA9B;AAEA,MAAIW,GAAG,GAAI,iDAAgDN,KAAK,CAACO,KAAN,CAAYC,GAAI,WAAUN,GAAI,IAAGE,GAAI,4BAAhG;AAEA,QAAMK,OAAO,GAAG;AACdC,IAAAA,WAAW,EAAE,IADC;AAEdC,IAAAA,MAAM,EAAE,SAFM;AAGdC,IAAAA,UAAU,EAAE,IAHE;AAIdC,IAAAA,IAAI,EAAE,YAJQ;AAKdC,IAAAA,KAAK,EAAE;AALO,GAAhB;AAQApB,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,QAAQ,CAAC;AACPc,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAGAd,IAAAA,QAAQ,CAAC;AACPc,MAAAA,IAAI,EAAE,aADC;AAEPC,MAAAA,OAAO,EAAEP;AAFF,KAAD,CAAR;AAIAN,IAAAA,MAAM,CAACH,KAAK,CAACO,KAAN,CAAYU,OAAZ,CAAoBC,OAApB,CAA4B,CAA5B,EAA+BC,QAA/B,CAAwCC,QAAxC,CAAiDlB,GAAlD,CAAN;AACAG,IAAAA,MAAM,CAACL,KAAK,CAACO,KAAN,CAAYU,OAAZ,CAAoBC,OAApB,CAA4B,CAA5B,EAA+BC,QAA/B,CAAwCC,QAAxC,CAAiDhB,GAAlD,CAAN;AACD,GAVQ,EAUN,CAACH,QAAD,CAVM,CAAT;;AAYA,QAAMoB,UAAU,GAAI,MAAM;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCvB,KAAK,CAACO,KAAN,CAAYU,OAAZ,CAAoBC,OAApB,CAA4B,CAA5B,EAA+BC,QAA/B,CAAwCC,QAAxC,CAAiDlB,GAAzF;AAED,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE;AACE,MAAA,KAAK,EAAC,cADR;AAEE,MAAA,KAAK,EAAC,MAFR;AAGE,MAAA,MAAM,EAAC,KAHT;AAIE,MAAA,WAAW,EAAC,GAJd;AAKE,MAAA,GAAG,EAAEI,GALP;AAME,MAAA,eAAe;AANjB;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AAAQ,MAAA,OAAO,EAAEe,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAlDQtB,G;UAEUF,W;;;KAFVE,G;AAoDT,eAAeH,OAAO,CAACE,eAAD,CAAP,CAAyBC,GAAzB,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport mapStoreToProps from '../../redux/mapStoreToProps';\nimport \"./Map.css\";\n\n\nfunction Map(props) {\n\n  const dispatch = useDispatch();\n\n  // let lat = props.store.geocode.results[0].geometry.location.lat;\n  // let lng = props.store.geocode.results[0].geometry.location.lng;\n\n  const [lat, setLat] = useState('');\n  const [lng, setLng] = useState('');\n\n  let url = `https://www.google.com/maps/embed/v1/view?key=${props.store.key}&center=${lat},${lng}&zoom=20&maptype=satellite`;\n\n  const address = {\n    houseNumber: 2808,\n    street: 'Terrace',\n    streetType: 'Dr',\n    city: 'Burnsville',\n    State: 'MN'\n  };\n\n  useEffect(() => {\n    dispatch({\n      type: 'GET_KEY',\n    });\n    dispatch({\n      type: 'GET_GEOCODE',\n      payload: address\n    });\n    setLat(props.store.geocode.results[0].geometry.location.lat);\n    setLng(props.store.geocode.results[0].geometry.location.lng);\n  }, [dispatch]);\n\n  const getGeocode = (() => {\n    console.log('getting my lang and long', props.store.geocode.results[0].geometry.location.lat);\n\n  });\n\n  return (\n    <div className=\"row w-100\">\n      <iframe\n        title=\"unique title\"\n        width=\"100%\"\n        height=\"600\"\n        frameBorder=\"0\"\n        src={url}\n        allowFullScreen>\n      </iframe>\n      <button onClick={getGeocode}>geocode</button>\n    </div>\n  );\n}\n\nexport default connect(mapStoreToProps)(Map);"]},"metadata":{},"sourceType":"module"}