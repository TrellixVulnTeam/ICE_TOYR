{"ast":null,"code":"var _jsxFileName = \"/Users/jman/Developer/ice/src/components/Quote/1TypeService/1TypeService.js\",\n    _s = $RefreshSig$();\n\nimport { connect, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport mapStoreToProps from '../../../redux/mapStoreToProps';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TypeService(props) {\n  _s();\n\n  let dispatch = useDispatch();\n  const services = ['Snow Removal', 'Excavating'];\n  const [isChecked, setIsChecked] = useState('');\n  useEffect(() => {\n    setIsChecked(props.store.customerInfo.service);\n  }, [props.store.customerInfo.service]);\n\n  const sendInfo = (values, path) => {\n    let step_number = props.store.quoteProgress.step_number;\n\n    switch (path) {\n      case 'forward':\n        dispatch({\n          type: 'UPDATE_CUSTOMER',\n          payload: values\n        });\n        dispatch({\n          type: 'QUOTE_PROGRESS',\n          payload: {\n            divisor: 8,\n            step_number: step_number + 1\n          }\n        });\n        props.history.push('./sub-service');\n        break;\n\n      case 'back':\n        dispatch({\n          type: 'QUOTE_PROGRESS',\n          payload: {\n            divisor: 8,\n            step_number: step_number - 1\n          }\n        });\n        props.history.push('./name');\n        break;\n\n      default:\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"What type of service would you like?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        service: ''\n      },\n      validate: values => {\n        const errors = {};\n\n        if (props.store.customerInfo.service) {\n          return errors;\n        }\n\n        if (!values.service) {\n          errors.service = 'Please pick an option';\n        }\n\n        return errors;\n      },\n      onSubmit: (values, {\n        setSubmitting\n      }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n\n          if (props.store.customerInfo.service) {\n            sendInfo({\n              service: props.store.customerInfo.service\n            }, 'forward');\n          } else {\n            sendInfo(values, 'forward');\n          }\n\n          setSubmitting(false);\n        }, 400);\n      },\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          role: \"group\",\n          \"aria-labelledby\": \"my-radio-group\",\n          children: services.map(s => /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              type: \"radio\",\n              name: \"service\",\n              value: s,\n              checked: isChecked === s,\n              onClick: e => setIsChecked(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 19\n            }, this), s]\n          }, s, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"service\",\n          component: \"div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => sendInfo('', 'back'),\n          children: \"Go to name and email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn primary_btn\",\n          type: \"submit\",\n          disabled: isSubmitting,\n          children: \"Go to location\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TypeService, \"TQ5P6AuUVH1AmkyiQcV0i1q3tZA=\", false, function () {\n  return [useDispatch];\n});\n\n_c = TypeService;\nexport default connect(mapStoreToProps)(withRouter(TypeService));\n\nvar _c;\n\n$RefreshReg$(_c, \"TypeService\");","map":{"version":3,"sources":["/Users/jman/Developer/ice/src/components/Quote/1TypeService/1TypeService.js"],"names":["connect","useDispatch","withRouter","Formik","Field","Form","ErrorMessage","mapStoreToProps","useEffect","useState","TypeService","props","dispatch","services","isChecked","setIsChecked","store","customerInfo","service","sendInfo","values","path","step_number","quoteProgress","type","payload","divisor","history","push","errors","setSubmitting","setTimeout","alert","JSON","stringify","isSubmitting","map","s","e","target","value"],"mappings":"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","sourcesContent":["import { connect, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport mapStoreToProps from '../../../redux/mapStoreToProps';\nimport { useEffect, useState } from 'react';\n\nfunction TypeService(props) {\n\n  let dispatch = useDispatch();\n\n  const services = ['Snow Removal', 'Excavating'];\n  const [isChecked, setIsChecked] = useState('');\n\n  useEffect(() => {\n    setIsChecked(props.store.customerInfo.service);\n  }, [props.store.customerInfo.service]);\n\n  const sendInfo = (values, path) => {\n    let step_number = props.store.quoteProgress.step_number;\n    switch (path) {\n      case 'forward':\n        dispatch({\n          type: 'UPDATE_CUSTOMER',\n          payload: values\n        });\n        dispatch({\n          type: 'QUOTE_PROGRESS',\n          payload: { divisor: 8, step_number: step_number + 1 }\n        });\n        props.history.push('./sub-service');\n        break;\n      case 'back':\n        dispatch({\n          type: 'QUOTE_PROGRESS',\n          payload: { divisor: 8, step_number: step_number - 1 }\n        });\n        props.history.push('./name');\n        break;\n      default:\n    }\n  };\n\n  return (\n    <div>\n      <h2>What type of service would you like?</h2>\n\n\n      <Formik\n        initialValues={{ service: '' }}\n        validate={values => {\n          const errors = {};\n\n          if (props.store.customerInfo.service) {\n            return errors;\n          }\n          if (!values.service) {\n            errors.service = 'Please pick an option';\n          }\n          return errors;\n        }}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            alert(JSON.stringify(values, null, 2));\n            if (props.store.customerInfo.service) {\n              sendInfo({ service: props.store.customerInfo.service }, 'forward');\n            } else {\n              sendInfo(values, 'forward');\n            }\n            setSubmitting(false);\n          }, 400);\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <div role=\"group\" aria-labelledby=\"my-radio-group\">\n              {services.map(s => (\n                <label key={s}>\n                  <Field\n                    type=\"radio\"\n                    name=\"service\"\n                    value={s}\n                    checked={isChecked === s}\n                    onClick={e => setIsChecked(e.target.value)}\n                  />\n                  {s}\n                </label>\n              ))}\n            </div>\n            <ErrorMessage name=\"service\" component=\"div\" />\n            <button onClick={() => sendInfo('', 'back')}>Go to name and email</button>\n            <button className='btn primary_btn' type=\"submit\" disabled={isSubmitting}>Go to location</button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n}\n\nexport default connect(mapStoreToProps)(withRouter(TypeService));"]},"metadata":{},"sourceType":"module"}