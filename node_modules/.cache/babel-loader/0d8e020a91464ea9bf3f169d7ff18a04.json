{"ast":null,"code":"var _jsxFileName = \"/Users/jman/Developer/ice/src/components/Quote/1TypeService/1TypeService.js\",\n    _s = $RefreshSig$();\n\nimport { connect, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport mapStoreToProps from '../../../redux/mapStoreToProps';\nimport { useEffect, useState } from 'react';\nimport NextButton from '../../CustomComponents/NextButton';\nimport Excavating from '../../../a_assets/images/Excavating.png';\nimport Snowblower from '../../../a_assets/images/Snowblower.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TypeService(props) {\n  _s();\n\n  let dispatch = useDispatch();\n  const services = ['Snow Removal', 'Excavating'];\n  const pics = [Snowblower, Excavating];\n  let picNum = 0;\n  const [isChecked, setIsChecked] = useState('');\n  useEffect(() => {\n    setIsChecked(props.store.customerInfo.service);\n  }, [props.store.customerInfo.service]);\n\n  const sendInfo = values => {\n    let step_number = props.store.quoteProgress.step_number;\n    dispatch({\n      type: 'UPDATE_CUSTOMER',\n      payload: values\n    });\n    dispatch({\n      type: 'QUOTE_PROGRESS',\n      payload: {\n        divisor: 8,\n        step_number: step_number + 1\n      }\n    });\n    props.history.push('./sub-service');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quoteStep_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"What type of service would you like?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        service: ''\n      },\n      validate: values => {\n        const errors = {};\n\n        if (props.store.customerInfo.service) {\n          return errors;\n        }\n\n        if (!values.service) {\n          errors.service = 'Please pick an option';\n        }\n\n        return errors;\n      },\n      onSubmit: (values, {\n        setSubmitting\n      }) => {\n        setTimeout(() => {\n          if (props.store.customerInfo.service) {\n            sendInfo({\n              service: props.store.customerInfo.service\n            }, 'forward');\n          } else {\n            sendInfo(values);\n          }\n\n          setSubmitting(false);\n        }, 400);\n      },\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          role: \"group\",\n          \"aria-labelledby\": \"my-radio-group\",\n          children: services.map(s => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                type: \"radio\",\n                name: \"service\",\n                value: s,\n                checked: isChecked === s,\n                onClick: e => setIsChecked(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: pics[1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 21\n              }, this), s]\n            }, s, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this), picNum, \"++;\"]\n          }, void 0, true))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"service\",\n          component: \"div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(NextButton, {\n          disabled: isSubmitting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TypeService, \"TQ5P6AuUVH1AmkyiQcV0i1q3tZA=\", false, function () {\n  return [useDispatch];\n});\n\n_c = TypeService;\nexport default connect(mapStoreToProps)(withRouter(TypeService));\n\nvar _c;\n\n$RefreshReg$(_c, \"TypeService\");","map":{"version":3,"sources":["/Users/jman/Developer/ice/src/components/Quote/1TypeService/1TypeService.js"],"names":["connect","useDispatch","withRouter","Formik","Field","Form","ErrorMessage","mapStoreToProps","useEffect","useState","NextButton","Excavating","Snowblower","TypeService","props","dispatch","services","pics","picNum","isChecked","setIsChecked","store","customerInfo","service","sendInfo","values","step_number","quoteProgress","type","payload","divisor","history","push","errors","setSubmitting","setTimeout","isSubmitting","map","s","e","target","value"],"mappings":"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","sourcesContent":["import { connect, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport mapStoreToProps from '../../../redux/mapStoreToProps';\nimport { useEffect, useState } from 'react';\nimport NextButton from '../../CustomComponents/NextButton';\n\nimport Excavating from '../../../a_assets/images/Excavating.png';\nimport Snowblower from '../../../a_assets/images/Snowblower.png';\n\nfunction TypeService(props) {\n\n  let dispatch = useDispatch();\n\n  const services = ['Snow Removal', 'Excavating'];\n  const pics = [Snowblower, Excavating];\n  let picNum = 0;\n  const [isChecked, setIsChecked] = useState('');\n\n  useEffect(() => {\n    setIsChecked(props.store.customerInfo.service);\n  }, [props.store.customerInfo.service]);\n\n  const sendInfo = (values) => {\n    let step_number = props.store.quoteProgress.step_number;\n\n    dispatch({\n      type: 'UPDATE_CUSTOMER',\n      payload: values\n    });\n    dispatch({\n      type: 'QUOTE_PROGRESS',\n      payload: { divisor: 8, step_number: step_number + 1 }\n    });\n    props.history.push('./sub-service');\n  };\n\n  return (\n    <div className=\"quoteStep_container\">\n      <h2>What type of service would you like?</h2>\n\n\n      <Formik\n        initialValues={{ service: '' }}\n        validate={values => {\n          const errors = {};\n\n          if (props.store.customerInfo.service) {\n            return errors;\n          }\n          if (!values.service) {\n            errors.service = 'Please pick an option';\n          }\n          return errors;\n        }}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n\n            if (props.store.customerInfo.service) {\n              sendInfo({ service: props.store.customerInfo.service }, 'forward');\n            } else {\n              sendInfo(values);\n            }\n            setSubmitting(false);\n          }, 400);\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <div role=\"group\" aria-labelledby=\"my-radio-group\">\n              {services.map(s => (\n                <>\n                  <label key={s}>\n                    <Field\n                      type=\"radio\"\n                      name=\"service\"\n                      value={s}\n                      checked={isChecked === s}\n                      onClick={e => setIsChecked(e.target.value)}\n                    />\n                    <img src={pics[1]} />\n                    {s}\n                  </label>\n                  {picNum}++;\n                </>\n              ))}\n            </div>\n            <ErrorMessage name=\"service\" component=\"div\" />\n            <NextButton disabled={isSubmitting} />\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n}\n\nexport default connect(mapStoreToProps)(withRouter(TypeService));"]},"metadata":{},"sourceType":"module"}