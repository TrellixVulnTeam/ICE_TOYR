{"ast":null,"code":"var _jsxFileName = \"/Users/jman/Developer/ice/src/components/CustomComponents/ProgressBar.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport mapStoreToProps from '../../redux/mapStoreToProps';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ProgressBar(props) {\n  _s();\n\n  const [widthPercent, setWidthPercent] = useState(0);\n  useEffect(() => {\n    const calculatePercent = () => {\n      // Number to divide by,\n      // the dividend\n      let dividend = 100; // Number dividing,\n      // the divisor\n\n      let divisor = props.store.quoteProgress.divisor; // Resulting number,\n      // the quotient\n\n      let quotient = dividend / divisor; // The step number currently loaded\n\n      let step_number = props.store.quoteProgress.step_number; // Progress of user in form\n\n      setWidthPercent(quotient * step_number);\n    };\n\n    calculatePercent();\n  }, [props.store.quoteProgress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progressBar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progressBar_container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progressBar_display\",\n        style: {\n          width: `${widthPercent}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProgressBar, \"uQgcKYv08b3Qb65aQxPicIrqjPk=\");\n\n_c = ProgressBar;\nexport default connect(mapStoreToProps)(withRouter(ProgressBar));\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"sources":["/Users/jman/Developer/ice/src/components/CustomComponents/ProgressBar.js"],"names":["useEffect","useState","connect","withRouter","mapStoreToProps","ProgressBar","props","widthPercent","setWidthPercent","calculatePercent","dividend","divisor","store","quoteProgress","quotient","step_number","width"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,eAAP,MAA4B,6BAA5B;;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AAE1B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,CAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,gBAAgB,GAAG,MAAM;AAE7B;AACA;AACA,UAAIC,QAAQ,GAAG,GAAf,CAJ6B,CAM7B;AACA;;AACA,UAAIC,OAAO,GAAGL,KAAK,CAACM,KAAN,CAAYC,aAAZ,CAA0BF,OAAxC,CAR6B,CAU7B;AACA;;AACA,UAAIG,QAAQ,GAAGJ,QAAQ,GAAGC,OAA1B,CAZ6B,CAc7B;;AACA,UAAII,WAAW,GAAGT,KAAK,CAACM,KAAN,CAAYC,aAAZ,CAA0BE,WAA5C,CAf6B,CAiB7B;;AACAP,MAAAA,eAAe,CAACM,QAAQ,GAAGC,WAAZ,CAAf;AACD,KAnBD;;AAqBAN,IAAAA,gBAAgB;AACjB,GAvBQ,EAuBN,CAACH,KAAK,CAACM,KAAN,CAAYC,aAAb,CAvBM,CAAT;AA2BA,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAqC,QAAA,KAAK,EAAE;AAAEG,UAAAA,KAAK,EAAG,GAAET,YAAa;AAAzB;AAA5C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAtCQF,W;;KAAAA,W;AAuCT,eAAeH,OAAO,CAACE,eAAD,CAAP,CAAyBD,UAAU,CAACE,WAAD,CAAnC,CAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport mapStoreToProps from '../../redux/mapStoreToProps';\n\nfunction ProgressBar(props) {\n\n  const [widthPercent, setWidthPercent] = useState(0);\n\n  useEffect(() => {\n    const calculatePercent = () => {\n\n      // Number to divide by,\n      // the dividend\n      let dividend = 100;\n\n      // Number dividing,\n      // the divisor\n      let divisor = props.store.quoteProgress.divisor;\n\n      // Resulting number,\n      // the quotient\n      let quotient = dividend / divisor;\n\n      // The step number currently loaded\n      let step_number = props.store.quoteProgress.step_number;\n\n      // Progress of user in form\n      setWidthPercent(quotient * step_number);\n    };\n\n    calculatePercent();\n  }, [props.store.quoteProgress]);\n\n\n\n  return (\n    <div className='progressBar'>\n      <div className='progressBar_container'>\n        <div className='progressBar_display' style={{ width: `${widthPercent}%` }}></div>\n      </div>\n    </div>\n  );\n}\nexport default connect(mapStoreToProps)(withRouter(ProgressBar));"]},"metadata":{},"sourceType":"module"}