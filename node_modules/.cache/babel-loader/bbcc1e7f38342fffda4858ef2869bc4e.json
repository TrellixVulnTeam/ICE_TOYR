{"ast":null,"code":"var _jsxFileName = \"/Users/jman/Developer/ice/src/components/Quote/1TypeService/1TypeService.js\",\n    _s = $RefreshSig$();\n\nimport { connect, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport mapStoreToProps from '../../../redux/mapStoreToProps';\nimport { useEffect, useState } from 'react';\nimport NextButton from '../../CustomComponents/NextButton';\nimport Excavating from '../../../a_assets/images/Uncropped_Excavating.png';\nimport Snowblower from '../../../a_assets/images/Uncropped_Snowblower.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TypeService(props) {\n  _s();\n\n  let dispatch = useDispatch();\n  const services = ['Snow Removal', 'Excavating'];\n  const pics = [Snowblower, Excavating];\n  const [isChecked, setIsChecked] = useState('');\n  useEffect(() => {\n    setIsChecked(props.store.customerInfo.service);\n  }, [props.store.customerInfo.service]);\n\n  const sendInfo = values => {\n    let step_number = props.store.quoteProgress.step_number;\n    dispatch({\n      type: 'UPDATE_CUSTOMER',\n      payload: values\n    });\n    dispatch({\n      type: 'QUOTE_PROGRESS',\n      payload: {\n        divisor: 9,\n        step_number: step_number + 1\n      }\n    });\n    props.history.push('./sub-service');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quoteStep_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"quoteStep_container_title\",\n      children: \"What type of service would you like?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        service: ''\n      },\n      validate: values => {\n        const errors = {};\n\n        if (props.store.customerInfo.service) {\n          return errors;\n        }\n\n        if (!values.service) {\n          errors.service = 'Please pick an option';\n        }\n\n        return errors;\n      },\n      onSubmit: (values, _ref) => {\n        let {\n          setSubmitting\n        } = _ref;\n\n        if (props.store.customerInfo.service) {\n          sendInfo({\n            service: props.store.customerInfo.service\n          }, 'forward');\n        } else {\n          sendInfo(values);\n        }\n\n        setSubmitting(false);\n      },\n      children: _ref2 => {\n        let {\n          isSubmitting\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"quoteStep_optionsContainer\",\n            role: \"group\",\n            \"aria-labelledby\": \"my-radio-group\",\n            children: services.map((s, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"quoteStep_options\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"quoteStep_label\",\n                  children: s\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"radio\",\n                  name: \"service\",\n                  value: s,\n                  checked: isChecked === s,\n                  onClick: e => setIsChecked(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: pics[i],\n                  alt: s,\n                  className: \"quoteStep_label_img\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 19\n              }, this)\n            }, s, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"service\",\n            component: \"div\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"quoteStep_nextBtn_container\",\n            children: /*#__PURE__*/_jsxDEV(NextButton, {\n              disabled: isSubmitting\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TypeService, \"TQ5P6AuUVH1AmkyiQcV0i1q3tZA=\", false, function () {\n  return [useDispatch];\n});\n\n_c = TypeService;\nexport default connect(mapStoreToProps)(withRouter(TypeService));\n\nvar _c;\n\n$RefreshReg$(_c, \"TypeService\");","map":{"version":3,"sources":["/Users/jman/Developer/ice/src/components/Quote/1TypeService/1TypeService.js"],"names":["connect","useDispatch","withRouter","Formik","Field","Form","ErrorMessage","mapStoreToProps","useEffect","useState","NextButton","Excavating","Snowblower","TypeService","props","dispatch","services","pics","isChecked","setIsChecked","store","customerInfo","service","sendInfo","values","step_number","quoteProgress","type","payload","divisor","history","push","errors","setSubmitting","isSubmitting","map","s","i","e","target","value"],"mappings":"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","sourcesContent":["import { connect, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport mapStoreToProps from '../../../redux/mapStoreToProps';\nimport { useEffect, useState } from 'react';\nimport NextButton from '../../CustomComponents/NextButton';\n\nimport Excavating from '../../../a_assets/images/Uncropped_Excavating.png';\nimport Snowblower from '../../../a_assets/images/Uncropped_Snowblower.png';\n\nfunction TypeService(props) {\n\n  let dispatch = useDispatch();\n\n  const services = ['Snow Removal', 'Excavating'];\n  const pics = [Snowblower, Excavating];\n  const [isChecked, setIsChecked] = useState('');\n\n  useEffect(() => {\n    setIsChecked(props.store.customerInfo.service);\n  }, [props.store.customerInfo.service]);\n\n  const sendInfo = (values) => {\n\n    let step_number = props.store.quoteProgress.step_number;\n\n    dispatch({\n      type: 'UPDATE_CUSTOMER',\n      payload: values\n    });\n    dispatch({\n      type: 'QUOTE_PROGRESS',\n      payload: { divisor: 9, step_number: step_number + 1 }\n    });\n    props.history.push('./sub-service');\n  };\n\n  return (\n    <div className=\"quoteStep_container\">\n      <h2 className='quoteStep_container_title'>What type of service would you like?</h2>\n      <Formik\n        initialValues={{ service: '' }}\n        validate={values => {\n          const errors = {};\n\n          if (props.store.customerInfo.service) {\n            return errors;\n          }\n          if (!values.service) {\n            errors.service = 'Please pick an option';\n          }\n          return errors;\n        }}\n        onSubmit={(values, { setSubmitting }) => {\n          if (props.store.customerInfo.service) {\n            sendInfo({ service: props.store.customerInfo.service }, 'forward');\n          } else {\n            sendInfo(values);\n          }\n          setSubmitting(false);\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <div className='quoteStep_optionsContainer' role=\"group\" aria-labelledby=\"my-radio-group\">\n              {services.map((s, i) => (\n                <div key={s} className='quoteStep_options'>\n                  <label >\n                    <p className='quoteStep_label'>{s}</p>\n                    <Field\n                      type=\"radio\"\n                      name=\"service\"\n                      value={s}\n                      checked={isChecked === s}\n                      onClick={e => setIsChecked(e.target.value)}\n                    />\n                    <img src={pics[i]} alt={s} className='quoteStep_label_img' />\n                  </label>\n                </div>\n              ))}\n            </div>\n            <ErrorMessage name=\"service\" component=\"div\" />\n            <div className='quoteStep_nextBtn_container'>\n              <NextButton disabled={isSubmitting} />\n            </div>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n}\n\nexport default connect(mapStoreToProps)(withRouter(TypeService));"]},"metadata":{},"sourceType":"module"}